apiVersion: v1
data:
  .air.toml: |
    [build]
      cmd = "go build -o ./tmp/main"
      bin = "./tmp/main"
      delay = 1000

    [log]
      color = true

    [watch]
      includes = ["."]
      excludes = ["tmp", "node_modules", ".git"]
  .gitignore: |
    /golang-demo
    /**/.terraform/
    /**/*terraform.*
  Dockerfile: |
    FROM golang:1.21-alpine
    RUN apk add --no-cache curl git postgresql-client && curl -sSfL https://raw.githubusercontent.com/cosmtrek/air/master/install.sh | sh -s -- -b /usr/local/bin
    WORKDIR /silly-demo
    COPY ../ /silly-demo
    RUN GOOS=linux GOARCH=amd64 go build -o golang-demo
    COPY ./db_schema.sql /silly-demo/db_schema.sql
    CMD psql -h $DB_ENDPOINT -p $DB_PORT -U $DB_USER -d postgres -f /silly-demo/db_schema.sql && air
  README.md: |-
    # Golang Demo

    ## Build binary

    ```sh
    GOOS=linux GOARCH=amd64 go build -o golang-demo
    chmod +x golang-demo
    ```

    ## Preconditions

    1. Install and configure PostreSQL db
    2. Create schema from file `db_schema.sql`

    ## Start program

    ```sh
    DB_ENDPOINT=<db_endpoint> DB_PORT=5432 DB_USER=<user> DB_PASS=<password> DB_NAME=<db_name> ./golang-demo
    ```

    ## Use program examples
    ```sh
    curl "http://localhost:8080/ping?url=https://google.com" --header "Content-Type:application/text"
    curl -X POST "http://localhost:8080/video?id=1&title=Forest_Gump"
    curl "http://localhost:8080/videos"
    curl "http://localhost:8080/fibonacci?number=7"
    curl "http://localhost:8080/memory-leak"
    ```
  db_schema.sql: |
    CREATE DATABASE db;
    \c db
    CREATE TABLE IF NOT EXISTS videos (
      id VARCHAR(255) NOT NULL,
      title VARCHAR(255) NOT NULL
    );
  docker-compose.yaml: |
    services:
      silly-demo:
        build: .
        image: tabatskyi/silly_demo:latest
        ports:
          - "8080:8080"
        volumes:
          - .:/app
        environment:
          - DB_ENDPOINT=postgres
          - DB_PORT=5432
          - DB_USER=postgres
          - DB_PASS=ohiorizz
          - PGPASSWORD=ohiorizz
          - DB_NAME=db
        depends_on:
          - postgres

      nginx:
        image: nginx:latest
        ports:
          - "80:80"
        volumes:
          - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro

      postgres:
        image: postgres:14-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ohiorizz
          POSTGRES_DB: silly_demo_db
        volumes:
          - postgres_data:/var/lib/postgresql/data

    volumes:
      postgres_data:
  fibonacci.go: |
    package main

    import (
    	"fmt"
    	"log/slog"
    	"net/http"
    	"strconv"

    	"github.com/gin-gonic/gin"
    )

    func fibonacciHandler(ctx *gin.Context) {
    	slog.Debug("Handling request", "URI", ctx.Request.RequestURI)
    	number, err := strconv.Atoi(ctx.Query("number"))
    	if err != nil {
    		ctx.String(http.StatusBadRequest, err.Error())
    		return
    	}
    	fib := calculateFibonacci(number)
    	ctx.String(http.StatusOK, fmt.Sprintf("%d", fib))
    }

    func calculateFibonacci(n int) int {
    	if n <= 1 {
    		return n
    	}
    	return calculateFibonacci(n-1) + calculateFibonacci(n-2)
    }
  go.mod: |
    module silly-demo

    go 1.21.0

    toolchain go1.23.1

    require (
    	github.com/gin-gonic/gin v1.10.0
    	github.com/go-pg/pg/v10 v10.13.0
    	github.com/go-resty/resty/v2 v2.14.0
    	github.com/stretchr/testify v1.9.0
    	gopkg.in/yaml.v3 v3.0.1
    )

    require (
    	github.com/bytedance/sonic v1.12.1 // indirect
    	github.com/bytedance/sonic/loader v0.2.0 // indirect
    	github.com/cloudwego/base64x v0.1.4 // indirect
    	github.com/cloudwego/iasm v0.2.0 // indirect
    	github.com/davecgh/go-spew v1.1.1 // indirect
    	github.com/gabriel-vasile/mimetype v1.4.5 // indirect
    	github.com/gin-contrib/sse v0.1.0 // indirect
    	github.com/go-pg/zerochecker v0.2.0 // indirect
    	github.com/go-playground/locales v0.14.1 // indirect
    	github.com/go-playground/universal-translator v0.18.1 // indirect
    	github.com/go-playground/validator/v10 v10.22.0 // indirect
    	github.com/goccy/go-json v0.10.3 // indirect
    	github.com/jinzhu/inflection v1.0.0 // indirect
    	github.com/json-iterator/go v1.1.12 // indirect
    	github.com/klauspost/cpuid/v2 v2.2.8 // indirect
    	github.com/kr/pretty v0.3.1 // indirect
    	github.com/leodido/go-urn v1.4.0 // indirect
    	github.com/mattn/go-isatty v0.0.20 // indirect
    	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
    	github.com/modern-go/reflect2 v1.0.2 // indirect
    	github.com/pelletier/go-toml/v2 v2.2.3 // indirect
    	github.com/pmezard/go-difflib v1.0.0 // indirect
    	github.com/rogpeppe/go-internal v1.11.0 // indirect
    	github.com/tmthrgd/go-hex v0.0.0-20190904060850-447a3041c3bc // indirect
    	github.com/twitchyliquid64/golang-asm v0.15.1 // indirect
    	github.com/ugorji/go/codec v1.2.12 // indirect
    	github.com/vmihailenco/bufpool v0.1.11 // indirect
    	github.com/vmihailenco/msgpack/v5 v5.4.1 // indirect
    	github.com/vmihailenco/tagparser v0.1.2 // indirect
    	github.com/vmihailenco/tagparser/v2 v2.0.0 // indirect
    	golang.org/x/arch v0.9.0 // indirect
    	golang.org/x/crypto v0.26.0 // indirect
    	golang.org/x/net v0.28.0 // indirect
    	golang.org/x/sys v0.24.0 // indirect
    	golang.org/x/text v0.17.0 // indirect
    	google.golang.org/protobuf v1.34.2 // indirect
    	gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c // indirect
    	mellium.im/sasl v0.3.1 // indirect
    )
  go.sum: |
    github.com/bytedance/sonic v1.12.1 h1:jWl5Qz1fy7X1ioY74WqO0KjAMtAGQs4sYnjiEBiyX24=
    github.com/bytedance/sonic v1.12.1/go.mod h1:B8Gt/XvtZ3Fqj+iSKMypzymZxw/FVwgIGKzMzT9r/rk=
    github.com/bytedance/sonic/loader v0.1.1/go.mod h1:ncP89zfokxS5LZrJxl5z0UJcsk4M4yY2JpfqGeCtNLU=
    github.com/bytedance/sonic/loader v0.2.0 h1:zNprn+lsIP06C/IqCHs3gPQIvnvpKbbxyXQP1iU4kWM=
    github.com/bytedance/sonic/loader v0.2.0/go.mod h1:ncP89zfokxS5LZrJxl5z0UJcsk4M4yY2JpfqGeCtNLU=
    github.com/cloudwego/base64x v0.1.4 h1:jwCgWpFanWmN8xoIUHa2rtzmkd5J2plF/dnLS6Xd/0Y=
    github.com/cloudwego/base64x v0.1.4/go.mod h1:0zlkT4Wn5C6NdauXdJRhSKRlJvmclQ1hhJgA0rcu/8w=
    github.com/cloudwego/iasm v0.2.0 h1:1KNIy1I1H9hNNFEEH3DVnI4UujN+1zjpuk6gwHLTssg=
    github.com/cloudwego/iasm v0.2.0/go.mod h1:8rXZaNYT2n95jn+zTI1sDr+IgcD2GVs0nlbbQPiEFhY=
    github.com/creack/pty v1.1.9/go.mod h1:oKZEueFk5CKHvIhNR5MUki03XCEU+Q6VDXinZuGJ33E=
    github.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
    github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=
    github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
    github.com/fsnotify/fsnotify v1.4.9 h1:hsms1Qyu0jgnwNXIxa+/V/PDsU6CfLf6CNO8H7IWoS4=
    github.com/fsnotify/fsnotify v1.4.9/go.mod h1:znqG4EE+3YCdAaPaxE2ZRY/06pZUdp0tY4IgpuI1SZQ=
    github.com/gabriel-vasile/mimetype v1.4.5 h1:J7wGKdGu33ocBOhGy0z653k/lFKLFDPJMG8Gql0kxn4=
    github.com/gabriel-vasile/mimetype v1.4.5/go.mod h1:ibHel+/kbxn9x2407k1izTA1S81ku1z/DlgOW2QE0M4=
    github.com/gin-contrib/sse v0.1.0 h1:Y/yl/+YNO8GZSjAhjMsSuLt29uWRFHdHYUb5lYOV9qE=
    github.com/gin-contrib/sse v0.1.0/go.mod h1:RHrZQHXnP2xjPF+u1gW/2HnVO7nvIa9PG3Gm+fLHvGI=
    github.com/gin-gonic/gin v1.10.0 h1:nTuyha1TYqgedzytsKYqna+DfLos46nTv2ygFy86HFU=
    github.com/gin-gonic/gin v1.10.0/go.mod h1:4PMNQiOhvDRa013RKVbsiNwoyezlm2rm0uX/T7kzp5Y=
    github.com/go-pg/pg/v10 v10.13.0 h1:xMagDE57VP8Y2KvIf9PvrsOAIjX62XqaKmfEzB0c5eU=
    github.com/go-pg/pg/v10 v10.13.0/go.mod h1:IXp9Ok9JNNW9yWedbQxxvKUv84XhoH5+tGd+68y+zDs=
    github.com/go-pg/zerochecker v0.2.0 h1:pp7f72c3DobMWOb2ErtZsnrPaSvHd2W4o9//8HtF4mU=
    github.com/go-pg/zerochecker v0.2.0/go.mod h1:NJZ4wKL0NmTtz0GKCoJ8kym6Xn/EQzXRl2OnAe7MmDo=
    github.com/go-playground/assert/v2 v2.2.0 h1:JvknZsQTYeFEAhQwI4qEt9cyV5ONwRHC+lYKSsYSR8s=
    github.com/go-playground/assert/v2 v2.2.0/go.mod h1:VDjEfimB/XKnb+ZQfWdccd7VUvScMdVu0Titje2rxJ4=
    github.com/go-playground/locales v0.14.1 h1:EWaQ/wswjilfKLTECiXz7Rh+3BjFhfDFKv/oXslEjJA=
    github.com/go-playground/locales v0.14.1/go.mod h1:hxrqLVvrK65+Rwrd5Fc6F2O76J/NuW9t0sjnWqG1slY=
    github.com/go-playground/universal-translator v0.18.1 h1:Bcnm0ZwsGyWbCzImXv+pAJnYK9S473LQFuzCbDbfSFY=
    github.com/go-playground/universal-translator v0.18.1/go.mod h1:xekY+UJKNuX9WP91TpwSH2VMlDf28Uj24BCp08ZFTUY=
    github.com/go-playground/validator/v10 v10.22.0 h1:k6HsTZ0sTnROkhS//R0O+55JgM8C4Bx7ia+JlgcnOao=
    github.com/go-playground/validator/v10 v10.22.0/go.mod h1:dbuPbCMFw/DrkbEynArYaCwl3amGuJotoKCe95atGMM=
    github.com/go-resty/resty/v2 v2.14.0 h1:/rhkzsAqGQkozwfKS5aFAbb6TyKd3zyFRWcdRXLPCAU=
    github.com/go-resty/resty/v2 v2.14.0/go.mod h1:IW6mekUOsElt9C7oWr0XRt9BNSD6D5rr9mhk6NjmNHg=
    github.com/goccy/go-json v0.10.3 h1:KZ5WoDbxAIgm2HNbYckL0se1fHD6rz5j4ywS6ebzDqA=
    github.com/goccy/go-json v0.10.3/go.mod h1:oq7eo15ShAhp70Anwd5lgX2pLfOS3QCiwU/PULtXL6M=
    github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
    github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
    github.com/google/gofuzz v1.0.0/go.mod h1:dBl0BpW6vV/+mYPU4Po3pmUjxk6FQPldtuIdl/M65Eg=
    github.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=
    github.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=
    github.com/json-iterator/go v1.1.12 h1:PV8peI4a0ysnczrg+LtxykD8LfKY9ML6u2jnxaEnrnM=
    github.com/json-iterator/go v1.1.12/go.mod h1:e30LSqwooZae/UwlEbR2852Gd8hjQvJoHmT4TnhNGBo=
    github.com/klauspost/cpuid/v2 v2.0.9/go.mod h1:FInQzS24/EEf25PyTYn52gqo7WaD8xa0213Md/qVLRg=
    github.com/klauspost/cpuid/v2 v2.2.8 h1:+StwCXwm9PdpiEkPyzBXIy+M9KUb4ODm0Zarf1kS5BM=
    github.com/klauspost/cpuid/v2 v2.2.8/go.mod h1:Lcz8mBdAVJIBVzewtcLocK12l3Y+JytZYpaMropDUws=
    github.com/knz/go-libedit v1.10.1/go.mod h1:MZTVkCWyz0oBc7JOWP3wNAzd002ZbM/5hgShxwh4x8M=
    github.com/kr/pretty v0.1.0/go.mod h1:dAy3ld7l9f0ibDNOQOHHMYYIIbhfbHSm3C4ZsoJORNo=
    github.com/kr/pretty v0.2.1/go.mod h1:ipq/a2n7PKx3OHsz4KJII5eveXtPO4qwEXGdVfWzfnI=
    github.com/kr/pretty v0.3.1 h1:flRD4NNwYAUpkphVc1HcthR4KEIFJ65n8Mw5qdRn3LE=
    github.com/kr/pretty v0.3.1/go.mod h1:hoEshYVHaxMs3cyo3Yncou5ZscifuDolrwPKZanG3xk=
    github.com/kr/pty v1.1.1/go.mod h1:pFQYn66WHrOpPYNljwOMqo10TkYh1fy3cYio2l3bCsQ=
    github.com/kr/text v0.1.0/go.mod h1:4Jbv+DJW3UT/LiOwJeYQe1efqtUx/iVham/4vfdArNI=
    github.com/kr/text v0.2.0 h1:5Nx0Ya0ZqY2ygV366QzturHI13Jq95ApcVaJBhpS+AY=
    github.com/kr/text v0.2.0/go.mod h1:eLer722TekiGuMkidMxC/pM04lWEeraHUUmBw8l2grE=
    github.com/leodido/go-urn v1.4.0 h1:WT9HwE9SGECu3lg4d/dIA+jxlljEa1/ffXKmRjqdmIQ=
    github.com/leodido/go-urn v1.4.0/go.mod h1:bvxc+MVxLKB4z00jd1z+Dvzr47oO32F/QSNjSBOlFxI=
    github.com/mattn/go-isatty v0.0.20 h1:xfD0iDuEKnDkl03q4limB+vH+GxLEtL/jb4xVJSWWEY=
    github.com/mattn/go-isatty v0.0.20/go.mod h1:W+V8PltTTMOvKvAeJH7IuucS94S2C6jfK/D7dTCTo3Y=
    github.com/modern-go/concurrent v0.0.0-20180228061459-e0a39a4cb421/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
    github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
    github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
    github.com/modern-go/reflect2 v1.0.2 h1:xBagoLtFs94CBntxluKeaWgTMpvLxC4ur3nMaC9Gz0M=
    github.com/modern-go/reflect2 v1.0.2/go.mod h1:yWuevngMOJpCy52FWWMvUC8ws7m/LJsjYzDa0/r8luk=
    github.com/nxadm/tail v1.4.4 h1:DQuhQpB1tVlglWS2hLQ5OV6B5r8aGxSrPc5Qo6uTN78=
    github.com/nxadm/tail v1.4.4/go.mod h1:kenIhsEOeOJmVchQTgglprH7qJGnHDVpk1VPCcaMI8A=
    github.com/onsi/ginkgo v1.14.2 h1:8mVmC9kjFFmA8H4pKMUhcblgifdkOIXPvbhN1T36q1M=
    github.com/onsi/ginkgo v1.14.2/go.mod h1:iSB4RoI2tjJc9BBv4NKIKWKya62Rps+oPG/Lv9klQyY=
    github.com/onsi/gomega v1.10.3 h1:gph6h/qe9GSUw1NhH1gp+qb+h8rXD8Cy60Z32Qw3ELA=
    github.com/onsi/gomega v1.10.3/go.mod h1:V9xEwhxec5O8UDM77eCW8vLymOMltsqPVYWrpDsH8xc=
    github.com/pelletier/go-toml/v2 v2.2.3 h1:YmeHyLY8mFWbdkNWwpr+qIL2bEqT0o95WSdkNHvL12M=
    github.com/pelletier/go-toml/v2 v2.2.3/go.mod h1:MfCQTFTvCcUyyvvwm1+G6H/jORL20Xlb6rzQu9GuUkc=
    github.com/pkg/diff v0.0.0-20210226163009-20ebb0f2a09e/go.mod h1:pJLUxLENpZxwdsKMEsNbx1VGcRFpLqf3715MtcvvzbA=
    github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=
    github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
    github.com/rogpeppe/go-internal v1.9.0/go.mod h1:WtVeX8xhTBvf0smdhujwtBcq4Qrzq/fJaraNFVN+nFs=
    github.com/rogpeppe/go-internal v1.11.0 h1:cWPaGQEPrBb5/AsnsZesgZZ9yb1OQ+GOISoDNXVBh4M=
    github.com/rogpeppe/go-internal v1.11.0/go.mod h1:ddIwULY96R17DhadqLgMfk9H9tvdUzkipdSkR5nkCZA=
    github.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
    github.com/stretchr/objx v0.4.0/go.mod h1:YvHI0jy2hoMjB+UWwv71VJQ9isScKT/TqJzVSSt89Yw=
    github.com/stretchr/objx v0.5.0/go.mod h1:Yh+to48EsGEfYuaHDzXPcE3xhTkx73EhmCGUpEOglKo=
    github.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=
    github.com/stretchr/testify v1.5.1/go.mod h1:5W2xD1RspED5o8YsWQXVCued0rvSQ+mT+I5cxcmMvtA=
    github.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
    github.com/stretchr/testify v1.7.1/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=
    github.com/stretchr/testify v1.8.0/go.mod h1:yNjHg4UonilssWZ8iaSj1OCr/vHnekPRkoO+kdMU+MU=
    github.com/stretchr/testify v1.8.1/go.mod h1:w2LPCIKwWwSfY2zedu0+kehJoqGctiVI29o6fzry7u4=
    github.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=
    github.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=
    github.com/tmthrgd/go-hex v0.0.0-20190904060850-447a3041c3bc h1:9lRDQMhESg+zvGYmW5DyG0UqvY96Bu5QYsTLvCHdrgo=
    github.com/tmthrgd/go-hex v0.0.0-20190904060850-447a3041c3bc/go.mod h1:bciPuU6GHm1iF1pBvUfxfsH0Wmnc2VbpgvbI9ZWuIRs=
    github.com/twitchyliquid64/golang-asm v0.15.1 h1:SU5vSMR7hnwNxj24w34ZyCi/FmDZTkS4MhqMhdFk5YI=
    github.com/twitchyliquid64/golang-asm v0.15.1/go.mod h1:a1lVb/DtPvCB8fslRZhAngC2+aY1QWCk3Cedj/Gdt08=
    github.com/ugorji/go/codec v1.2.12 h1:9LC83zGrHhuUA9l16C9AHXAqEV/2wBQ4nkvumAE65EE=
    github.com/ugorji/go/codec v1.2.12/go.mod h1:UNopzCgEMSXjBc6AOMqYvWC1ktqTAfzJZUZgYf6w6lg=
    github.com/vmihailenco/bufpool v0.1.11 h1:gOq2WmBrq0i2yW5QJ16ykccQ4wH9UyEsgLm6czKAd94=
    github.com/vmihailenco/bufpool v0.1.11/go.mod h1:AFf/MOy3l2CFTKbxwt0mp2MwnqjNEs5H/UxrkA5jxTQ=
    github.com/vmihailenco/msgpack/v5 v5.4.1 h1:cQriyiUvjTwOHg8QZaPihLWeRAAVoCpE00IUPn0Bjt8=
    github.com/vmihailenco/msgpack/v5 v5.4.1/go.mod h1:GaZTsDaehaPpQVyxrf5mtQlH+pc21PIudVV/E3rRQok=
    github.com/vmihailenco/tagparser v0.1.2 h1:gnjoVuB/kljJ5wICEEOpx98oXMWPLj22G67Vbd1qPqc=
    github.com/vmihailenco/tagparser v0.1.2/go.mod h1:OeAg3pn3UbLjkWt+rN9oFYB6u/cQgqMEUPoW2WPyhdI=
    github.com/vmihailenco/tagparser/v2 v2.0.0 h1:y09buUbR+b5aycVFQs/g70pqKVZNBmxwAhO7/IwNM9g=
    github.com/vmihailenco/tagparser/v2 v2.0.0/go.mod h1:Wri+At7QHww0WTrCBeu4J6bNtoV6mEfg5OIWRZA9qds=
    github.com/yuin/goldmark v1.4.13/go.mod h1:6yULJ656Px+3vBD8DxQVa3kxgyrAnzto9xy5taEt/CY=
    golang.org/x/arch v0.9.0 h1:ub9TgUInamJ8mrZIGlBG6/4TqWeMszd4N8lNorbrr6k=
    golang.org/x/arch v0.9.0/go.mod h1:FEVrYAQjsQXMVJ1nsMoVVXPZg6p2JE2mx8psSWTDQys=
    golang.org/x/crypto v0.0.0-20190308221718-c2843e01d9a2/go.mod h1:djNgcEr1/C05ACkg1iLfiJU5Ep61QUkGW8qpdssI0+w=
    golang.org/x/crypto v0.0.0-20210921155107-089bfa567519/go.mod h1:GvvjBRRGRdwPK5ydBHafDWAxML/pGHZbMvKqRZ5+Abc=
    golang.org/x/crypto v0.13.0/go.mod h1:y6Z2r+Rw4iayiXXAIxJIDAJ1zMW4yaTpebo8fPOliYc=
    golang.org/x/crypto v0.19.0/go.mod h1:Iy9bg/ha4yyC70EfRS8jz+B6ybOBKMaSxLj6P6oBDfU=
    golang.org/x/crypto v0.23.0/go.mod h1:CKFgDieR+mRhux2Lsu27y0fO304Db0wZe70UKqHu0v8=
    golang.org/x/crypto v0.25.0/go.mod h1:T+wALwcMOSE0kXgUAnPAHqTLW+XHgcELELW8VaDgm/M=
    golang.org/x/crypto v0.26.0 h1:RrRspgV4mU+YwB4FYnuBoKsUapNIL5cohGAmSH3azsw=
    golang.org/x/crypto v0.26.0/go.mod h1:GY7jblb9wI+FOo5y8/S2oY4zWP07AkOJ4+jxCqdqn54=
    golang.org/x/mod v0.6.0-dev.0.20220419223038-86c51ed26bb4/go.mod h1:jJ57K6gSWd91VN4djpZkiMVwK6gcyfeH4XE8wZrZaV4=
    golang.org/x/mod v0.8.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
    golang.org/x/mod v0.12.0/go.mod h1:iBbtSCu2XBx23ZKBPSOrRkjjQPZFPuis4dIYUhu/chs=
    golang.org/x/mod v0.15.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=
    golang.org/x/mod v0.17.0/go.mod h1:hTbmBsO62+eylJbnUtE2MGJUyE7QWk4xUqPFrRgJ+7c=
    golang.org/x/net v0.0.0-20190620200207-3b0461eec859/go.mod h1:z5CRVTTTmAJ677TzLLGU+0bjPO0LkuOLi4/5GtJWs/s=
    golang.org/x/net v0.0.0-20210226172049-e18ecbb05110/go.mod h1:m0MpNAwzfU5UDzcl9v0D8zg8gWTRqZa9RBIspLL5mdg=
    golang.org/x/net v0.0.0-20220722155237-a158d28d115b/go.mod h1:XRhObCWvk6IyKnWLug+ECip1KBveYUHfp+8e9klMJ9c=
    golang.org/x/net v0.6.0/go.mod h1:2Tu9+aMcznHK/AK1HMvgo6xiTLG5rD5rZLDS+rp2Bjs=
    golang.org/x/net v0.10.0/go.mod h1:0qNGK6F8kojg2nk9dLZ2mShWaEBan6FAoqfSigmmuDg=
    golang.org/x/net v0.15.0/go.mod h1:idbUs1IY1+zTqbi8yxTbhexhEEk5ur9LInksu6HrEpk=
    golang.org/x/net v0.21.0/go.mod h1:bIjVDfnllIU7BJ2DNgfnXvpSvtn8VRwhlsaeUTyUS44=
    golang.org/x/net v0.25.0/go.mod h1:JkAGAh7GEvH74S6FOH42FLoXpXbE/aqXSrIQjXgsiwM=
    golang.org/x/net v0.27.0/go.mod h1:dDi0PyhWNoiUOrAS8uXv/vnScO4wnHQO4mj9fn/RytE=
    golang.org/x/net v0.28.0 h1:a9JDOJc5GMUJ0+UDqmLT86WiEy7iWyIhz8gz8E4e5hE=
    golang.org/x/net v0.28.0/go.mod h1:yqtgsTWOOnlGLG9GFRrK3++bGOUEkNBoHZc8MEDWPNg=
    golang.org/x/sync v0.0.0-20190423024810-112230192c58/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
    golang.org/x/sync v0.0.0-20220722155255-886fb9371eb4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
    golang.org/x/sync v0.1.0/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
    golang.org/x/sync v0.3.0/go.mod h1:FU7BRWz2tNW+3quACPkgCx/L+uEAv1htQ0V83Z9Rj+Y=
    golang.org/x/sync v0.6.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=
    golang.org/x/sync v0.7.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=
    golang.org/x/sys v0.0.0-20190215142949-d0b11bdaac8a/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
    golang.org/x/sys v0.0.0-20201119102817-f84b799fce68/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=
    golang.org/x/sys v0.0.0-20210615035016-665e8c7367d1/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
    golang.org/x/sys v0.0.0-20220520151302-bc2c85ada10a/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
    golang.org/x/sys v0.0.0-20220722155257-8c9f86f7a55f/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
    golang.org/x/sys v0.5.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
    golang.org/x/sys v0.6.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
    golang.org/x/sys v0.8.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
    golang.org/x/sys v0.12.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=
    golang.org/x/sys v0.17.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
    golang.org/x/sys v0.20.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
    golang.org/x/sys v0.22.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
    golang.org/x/sys v0.24.0 h1:Twjiwq9dn6R1fQcyiK+wQyHWfaz/BJB+YIpzU/Cv3Xg=
    golang.org/x/sys v0.24.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=
    golang.org/x/telemetry v0.0.0-20240228155512-f48c80bd79b2/go.mod h1:TeRTkGYfJXctD9OcfyVLyj2J3IxLnKwHJR8f4D8a3YE=
    golang.org/x/term v0.0.0-20201126162022-7de9c90e9dd1/go.mod h1:bj7SfCRtBDWHUb9snDiAeCFNEtKQo2Wmx5Cou7ajbmo=
    golang.org/x/term v0.0.0-20210927222741-03fcf44c2211/go.mod h1:jbD1KX2456YbFQfuXm/mYQcufACuNUgVhRMnK/tPxf8=
    golang.org/x/term v0.5.0/go.mod h1:jMB1sMXY+tzblOD4FWmEbocvup2/aLOaQEp7JmGp78k=
    golang.org/x/term v0.8.0/go.mod h1:xPskH00ivmX89bAKVGSKKtLOWNx2+17Eiy94tnKShWo=
    golang.org/x/term v0.12.0/go.mod h1:owVbMEjm3cBLCHdkQu9b1opXd4ETQWc3BhuQGKgXgvU=
    golang.org/x/term v0.17.0/go.mod h1:lLRBjIVuehSbZlaOtGMbcMncT+aqLLLmKrsjNrUguwk=
    golang.org/x/term v0.20.0/go.mod h1:8UkIAJTvZgivsXaD6/pH6U9ecQzZ45awqEOzuCvwpFY=
    golang.org/x/term v0.22.0/go.mod h1:F3qCibpT5AMpCRfhfT53vVJwhLtIVHhB9XDjfFvnMI4=
    golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
    golang.org/x/text v0.3.3/go.mod h1:5Zoc/QRtKVWzQhOtBMvqHzDpF6irO9z98xDceosuGiQ=
    golang.org/x/text v0.3.7/go.mod h1:u+2+/6zg+i71rQMx5EYifcz6MCKuco9NR6JIITiCfzQ=
    golang.org/x/text v0.7.0/go.mod h1:mrYo+phRRbMaCq/xk9113O4dZlRixOauAjOtrjsXDZ8=
    golang.org/x/text v0.9.0/go.mod h1:e1OnstbJyHTd6l/uOt8jFFHp6TRDWZR/bV3emEE/zU8=
    golang.org/x/text v0.13.0/go.mod h1:TvPlkZtksWOMsz7fbANvkp4WM8x/WCo/om8BMLbz+aE=
    golang.org/x/text v0.14.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=
    golang.org/x/text v0.15.0/go.mod h1:18ZOQIKpY8NJVqYksKHtTdi31H5itFRjB5/qKTNYzSU=
    golang.org/x/text v0.16.0/go.mod h1:GhwF1Be+LQoKShO3cGOHzqOgRrGaYc9AvblQOmPVHnI=
    golang.org/x/text v0.17.0 h1:XtiM5bkSOt+ewxlOE/aE/AKEHibwj/6gvWMl9Rsh0Qc=
    golang.org/x/text v0.17.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=
    golang.org/x/time v0.6.0 h1:eTDhh4ZXt5Qf0augr54TN6suAUudPcawVZeIAPU7D4U=
    golang.org/x/time v0.6.0/go.mod h1:3BpzKBy/shNhVucY/MWOyx10tF3SFh9QdLuxbVysPQM=
    golang.org/x/tools v0.0.0-20180917221912-90fa682c2a6e/go.mod h1:n7NCudcB/nEzxVGmLbDWY5pfWTLqBcC2KZ6jyYvM4mQ=
    golang.org/x/tools v0.0.0-20191119224855-298f0cb1881e/go.mod h1:b+2E5dAYhXwXZwtnZ6UAqBI28+e2cm9otk0dWdXHAEo=
    golang.org/x/tools v0.1.12/go.mod h1:hNGJHUnrk76NpqgfD5Aqm5Crs+Hm0VOH/i9J2+nxYbc=
    golang.org/x/tools v0.6.0/go.mod h1:Xwgl3UAJ/d3gWutnCtw505GrjyAbvKui8lOU390QaIU=
    golang.org/x/tools v0.13.0/go.mod h1:HvlwmtVNQAhOuCjW7xxvovg8wbNq7LwfXh/k7wXUl58=
    golang.org/x/tools v0.21.1-0.20240508182429-e35e4ccd0d2d/go.mod h1:aiJjzUbINMkxbQROHiO6hDPo2LHcIPhhQsa9DLh0yGk=
    golang.org/x/xerrors v0.0.0-20190717185122-a985d3407aa7/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
    golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543 h1:E7g+9GITq07hpfrRu66IVDexMakfv52eLZ2CXBWiKr4=
    golang.org/x/xerrors v0.0.0-20191204190536-9bdfabe68543/go.mod h1:I/5z698sn9Ka8TeJc9MKroUUfqBBauWjQqLJ2OPfmY0=
    google.golang.org/protobuf v1.34.2 h1:6xV6lTsCfpGD21XK49h7MhtcApnLqkfYgPcdHftf6hg=
    google.golang.org/protobuf v1.34.2/go.mod h1:qYOHts0dSfpeUzUFpOMr/WGzszTmLH+DiWniOlNbLDw=
    gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
    gopkg.in/check.v1 v1.0.0-20180628173108-788fd7840127/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
    gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c h1:Hei/4ADfdWqJk1ZMxUNpqntNwaWcugrBjAiHlqqRiVk=
    gopkg.in/check.v1 v1.0.0-20201130134442-10cb98267c6c/go.mod h1:JHkPIbrfpd72SG/EVd6muEfDQjcINNoR0C8j2r3qZ4Q=
    gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7 h1:uRGJdciOHaEIrze2W8Q3AKkepLTh2hOroT7a+7czfdQ=
    gopkg.in/tomb.v1 v1.0.0-20141024135613-dd632973f1e7/go.mod h1:dt/ZhP58zS4L8KSrWDmTeBkI65Dw0HsyUHuEVlX15mw=
    gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
    gopkg.in/yaml.v2 v2.3.0 h1:clyUAQHOM3G0M3f5vQj7LuJrETvjVot3Z5el9nffUtU=
    gopkg.in/yaml.v2 v2.3.0/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
    gopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
    gopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=
    gopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=
    mellium.im/sasl v0.3.1 h1:wE0LW6g7U83vhvxjC1IY8DnXM+EU095yeo8XClvCdfo=
    mellium.im/sasl v0.3.1/go.mod h1:xm59PUYpZHhgQ9ZqoJ5QaCqzWMi8IeS49dhp6plPCzw=
    nullprogram.com/x/optparse v1.0.0/go.mod h1:KdyPE+Igbe0jQUrVfMqDMeJQIJZEuyV7pjYmp6pbG50=
  main.go: |
    package main

    import (
    	"context"
    	"errors"
    	"fmt"
    	"log"
    	// "log/slog"
    	"net/http"
    	"os"
    	"os/signal"
    	"syscall"
    	"time"
    	// change
    	"github.com/gin-gonic/gin"
    )

    func main() {
    	log.SetOutput(os.Stderr)
    	if os.Getenv("DEBUG") == "true" {
    		// slog.SetLogLoggerLevel(slog.LevelDebug)
    	}
    	if os.Getenv("MEMORY_LEAK_MAX_MEMORY") != "" {
    		go func() { memoryLeak(0, 0) }()
    	}

    	// Server
    	log.Println("Starting server...")
    	router := gin.New()
    	router.GET("/fibonacci", fibonacciHandler)
    	router.POST("/video", videoPostHandler)
    	router.GET("/videos", videosGetHandler)
    	router.GET("/ping", pingHandler)
    	router.GET("/memory-leak", memoryLeakHandler)
    	router.GET("/", rootHandler)
    	port := os.Getenv("PORT")
    	if len(port) == 0 {
    		port = "8080"
    	}
    	server := &http.Server{
    		Addr:    fmt.Sprintf(":%s", port),
    		Handler: router.Handler(),
    	}

    	// Signals
    	if len(os.Getenv("NO_SIGNALS")) > 0 {
    		if err := server.ListenAndServe(); !errors.Is(err, http.ErrServerClosed) {
    			log.Fatalf("HTTP server error: %v", err)
    		}
    	} else {
    		go func() {
    			if err := server.ListenAndServe(); !errors.Is(err, http.ErrServerClosed) {
    				log.Fatalf("HTTP server error: %v", err)
    			}
    			log.Println("Stopped serving new connections.")
    		}()
    		sigChan := make(chan os.Signal, 1)
    		signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
    		<-sigChan
    		shutdownCtx, shutdownRelease := context.WithTimeout(context.Background(), 60*time.Second)
    		defer shutdownRelease()
    		if err := server.Shutdown(shutdownCtx); err != nil {
    			log.Fatalf("HTTP shutdown error: %v", err)
    		}
    		log.Println("Graceful shutdown complete.")
    	}
    }

    func httpErrorBadRequest(err error, ctx *gin.Context) {
    	httpError(err, ctx, http.StatusBadRequest)
    }

    func httpErrorInternalServerError(err error, ctx *gin.Context) {
    	httpError(err, ctx, http.StatusInternalServerError)
    }

    func httpError(err error, ctx *gin.Context, status int) {
    	log.Println(err.Error())
    	ctx.String(status, err.Error())
    }
  memory.go: |
    package main

    import (
    	"fmt"
    	"log"
    	"net/http"
    	"os"
    	"runtime"
    	"strconv"
    	"time"

    	"github.com/gin-gonic/gin"
    )

    var memoryLeakSlice = make([]byte, 1024*1024)

    func memoryLeakHandler(ctx *gin.Context) {
    	maxMemory := 0
    	if len(ctx.Query("max-memory")) > 0 {
    		maxMemory, _ = strconv.Atoi(ctx.Query("max-memory"))
    	}
    	frequency := 60 // 60 seconds
    	if len(ctx.Query("frequency")) > 0 {
    		frequency, _ = strconv.Atoi(ctx.Query("frequency"))
    	}
    	go func() {
    		memoryLeak(maxMemory, frequency)
    	}()
    	ctx.String(http.StatusOK, "Memory leak simulation started")
    }

    func memoryLeak(maxMemory, frequency int) {
    	if maxMemory <= 0 {
    		maxMemory = 1024 * 1 // 1 GB
    		if len(os.Getenv("MEMORY_LEAK_MAX_MEMORY")) > 0 {
    			maxMemory, _ = strconv.Atoi(os.Getenv("MEMORY_LEAK_MAX_MEMORY"))
    		}
    	}
    	if frequency <= 0 {
    		frequency = 60
    		if len(os.Getenv("MEMORY_LEAK_FREQUENCY")) > 0 {
    			frequency, _ = strconv.Atoi(os.Getenv("MEMORY_LEAK_FREQUENCY"))
    		}
    	}
    	log.Printf(
    		"Memory leak simulation started with max memory set to %d MB and frequency set to %d seconds",
    		maxMemory,
    		frequency,
    	)
    	for {
    		memoryLeakSlice = append(memoryLeakSlice, memoryLeakSlice...)
    		memStats := runtime.MemStats{}
    		runtime.ReadMemStats(&memStats)
    		fmt.Printf("Memory usage: %d MB\n", memStats.Alloc/1024/1024)
    		if maxMemory > 0 && memStats.Alloc/1024/1024 > uint64(maxMemory) {
    			log.Println("Memory leak simulation ended")
    			break
    		}
    		time.Sleep(time.Second * time.Duration(frequency))
    	}
    }
  ping.go: |
    package main

    import (
    	"errors"
    	"log/slog"
    	"net/http"
    	"os"

    	"github.com/gin-gonic/gin"
    	"github.com/go-resty/resty/v2"
    )

    func pingHandler(ctx *gin.Context) {
    	slog.Debug("Handling request", "URI", ctx.Request.RequestURI)
    	req := resty.New().R().SetHeaderMultiValues(ctx.Request.Header).SetHeader("Content-Type", "application/text")
    	url := ctx.Query("url")
    	if len(url) == 0 {
    		url = os.Getenv("PING_URL")
    		if len(url) == 0 {
    			httpErrorBadRequest(errors.New("url is empty"), ctx)
    			return
    		}
    	}
    	slog.Info("Sending a ping", "URL", url)
    	resp, err := req.Get(url)
    	if err != nil {
    		httpErrorBadRequest(err, ctx)
    		return
    	}
    	slog.Info(resp.String())
    	ctx.String(http.StatusOK, resp.String())
    }
  root.go: |
    package main

    import (
    	"fmt"
    	"log/slog"
    	"net/http"
    	"os"

    	"github.com/gin-gonic/gin"
    )

    func rootHandler(ctx *gin.Context) {
    	if len(ctx.Query("fail")) > 0 || len(os.Getenv("FAIL")) > 0 {
    		ctx.String(http.StatusInternalServerError, "Something terrible happened")
    		return
    	}
    	slog.Debug("Handling request", "URI", ctx.Request.RequestURI)
    	version := os.Getenv("VERSION")
    	output := os.Getenv("MESSAGE")
    	if len(output) == 0 {
    		output = "This is a silly demo"
    	}
    	if len(version) > 0 {
    		output = fmt.Sprintf("%s version %s", output, version)
    	}
    	if len(ctx.Query("html")) > 0 {
    		output = fmt.Sprintf("<h1>%s</h1>", output)
    	}
    	output = fmt.Sprintf("%s\n", output)
    	ctx.String(http.StatusOK, output)
    }
  root_test.go: |
    package main

    import (
    	"net/http"
    	"net/http/httptest"
    	"os"
    	"testing"

    	"github.com/gin-gonic/gin"
    	"github.com/stretchr/testify/assert"
    )

    func TestRootHandler(t *testing.T) {
    	// Test case 1: No query parameters
    	req, _ := http.NewRequest("GET", "/", nil)
    	w := httptest.NewRecorder()
    	router := gin.Default()
    	router.GET("/", rootHandler)
    	router.ServeHTTP(w, req)
    	assert.Equal(t, http.StatusOK, w.Code)
    	assert.Equal(t, "This is a silly demo\n", w.Body.String())

    	// Test case 2: Query parameter "fail" is present
    	req, _ = http.NewRequest("GET", "/?fail=true", nil)
    	w = httptest.NewRecorder()
    	router.ServeHTTP(w, req)
    	assert.Equal(t, http.StatusBadRequest, w.Code)
    	assert.Equal(t, "Something terrible happened", w.Body.String())

    	// Test case 3: Query parameter "html" is present
    	req, _ = http.NewRequest("GET", "/?html=true", nil)
    	w = httptest.NewRecorder()
    	router.ServeHTTP(w, req)
    	assert.Equal(t, http.StatusOK, w.Code)
    	assert.Equal(t, "<h1>This is a silly demo</h1>\n", w.Body.String())

    	// Test case 4: Query parameter "html" and "fail" are present
    	req, _ = http.NewRequest("GET", "/?html=true&fail=true", nil)
    	w = httptest.NewRecorder()
    	router.ServeHTTP(w, req)
    	assert.Equal(t, http.StatusBadRequest, w.Code)
    	assert.Equal(t, "Something terrible happened", w.Body.String())

    	// Test case 5: Environment variable "VERSION" is set
    	os.Setenv("VERSION", "1.0")
    	req, _ = http.NewRequest("GET", "/", nil)
    	w = httptest.NewRecorder()
    	router.ServeHTTP(w, req)
    	assert.Equal(t, http.StatusOK, w.Code)
    	assert.Equal(t, "This is a silly demo version 1.0\n", w.Body.String())
    	os.Unsetenv("VERSION")

    	// Test case 6: Environment variable "MESSAGE" is set
    	os.Setenv("MESSAGE", "Custom message")
    	req, _ = http.NewRequest("GET", "/", nil)
    	w = httptest.NewRecorder()
    	router.ServeHTTP(w, req)
    	assert.Equal(t, http.StatusOK, w.Code)
    	assert.Equal(t, "Custom message\n", w.Body.String())
    	os.Unsetenv("MESSAGE")
    }
  video.go: |
    package main

    import (
    	"errors"
    	"fmt"
    	"log/slog"
    	"net/http"
    	"os"
    	"strings"

    	"github.com/go-pg/pg/v10"

    	"github.com/gin-gonic/gin"
    	"gopkg.in/yaml.v3"
    )

    var dbSession *pg.DB = nil

    type Video struct {
    	ID    string `json:"id"`
    	Title string `json:"title"`
    }

    func getDB(c *gin.Context) *pg.DB {
    	if dbSession != nil {
    		return dbSession
    	}
    	endpoint := os.Getenv("DB_ENDPOINT")
    	if len(endpoint) == 0 {
    		slog.Error("Environment variable `DB_ENDPOINT` is empty")
    		c.String(http.StatusBadRequest, "Environment variable `DB_ENDPOINT` is empty")
    		return nil
    	}
    	port := os.Getenv("DB_PORT")
    	if len(port) == 0 {
    		slog.Error("Environment variable `DB_PORT` is empty")
    		c.String(http.StatusBadRequest, "Environment variable `DB_PORT` is empty")
    		return nil
    	}
    	user := os.Getenv("DB_USER")
    	if len(user) == 0 {
    		user = os.Getenv("DB_USERNAME")
    		if len(user) == 0 {
    			slog.Error("Environment variables `DB_USER` and `DB_USERNAME` are empty")
    			c.String(http.StatusBadRequest, "Environment variables `DB_USER` and `DB_USERNAME` are empty")
    			return nil
    		}
    	}
    	pass := os.Getenv("DB_PASS")
    	if len(pass) == 0 {
    		pass = os.Getenv("DB_PASSWORD")
    		if len(pass) == 0 {
    			slog.Error("Environment variables `DB_PASS` and `DB_PASSWORD are empty")
    			c.String(http.StatusBadRequest, "Environment variables `DB_PASS` and `DB_PASSWORD are empty")
    			return nil
    		}
    	}
    	name := os.Getenv("DB_NAME")
    	if len(name) == 0 {
    		slog.Error("Environment variable `DB_NAME` is empty")
    		c.String(http.StatusBadRequest, "Environment variable `DB_NAME` is empty")
    		return nil
    	}
    	dbSession := pg.Connect(&pg.Options{
    		Addr:     endpoint + ":" + port,
    		User:     user,
    		Password: pass,
    		Database: name,
    		TLSConfig: nil,
    	})
    	return dbSession
    }

    func videosGetHandler(ctx *gin.Context) {
    	slog.Debug("Handling request", "URI", ctx.Request.RequestURI)
    	var videos []Video
    	if strings.ToLower(os.Getenv("DB")) == "fs" {
    		var err error
    		videos, err = getVideosFromFile()
    		if err != nil {
    			httpErrorInternalServerError(err, ctx)
    			return
    		}
    	} else {
    		db := getDB(ctx)
    		if db == nil {
    			return
    		}
    		err := db.ModelContext(ctx, &videos).Select()
    		if err != nil {
    			httpErrorInternalServerError(err, ctx)
    			return
    		}
    	}
    	ctx.JSON(http.StatusOK, videos)
    }

    func getVideosFromFile() ([]Video, error) {
    	dir := os.Getenv("FS_DIR")
    	if len(dir) == 0 {
    		dir = "/cache"
    	}
    	path := fmt.Sprintf("%s/videos.yaml", dir)
    	var videos []Video
    	yamlData, err := os.ReadFile(path)
    	if err != nil {
    		return videos, err
    	}
    	err = yaml.Unmarshal(yamlData, &videos)
    	return videos, err
    }

    func videoPostHandler(ctx *gin.Context) {
    	slog.Debug("Handling request", "URI", ctx.Request.RequestURI)
    	id := ctx.Query("id")
    	if len(id) == 0 {
    		httpErrorBadRequest(errors.New("id is empty"), ctx)
    		return
    	}
    	title := ctx.Query("title")
    	if len(title) == 0 {
    		httpErrorBadRequest(errors.New("title is empty"), ctx)
    		return
    	}
    	video := &Video{
    		ID:    id,
    		Title: title,
    	}
    	if strings.ToLower(os.Getenv("DB")) == "fs" {
    		videos, err := getVideosFromFile()
    		videos = append(videos, *video)
    		dir := os.Getenv("FS_DIR")
    		if len(dir) == 0 {
    			dir = "/cache"
    		}
    		path := fmt.Sprintf("%s/videos.yaml", dir)
    		yamlData, err := yaml.Marshal(videos)
    		if err != nil {
    			httpErrorInternalServerError(err, ctx)
    			return
    		}
    		err = os.WriteFile(path, yamlData, 0644)
    		if err != nil {
    			httpErrorInternalServerError(err, ctx)
    		}
    	} else {
    		db := getDB(ctx)
    		if db == nil {
    			return
    		}
    		_, err := db.ModelContext(ctx, video).Insert()
    		if err != nil {
    			httpErrorInternalServerError(err, ctx)
    			return
    		}
    	}
    }
kind: ConfigMap
metadata:
  labels:
    io.kompose.service: silly-demo
  name: silly-demo-cm0
